---
title: Java
layout: ../views/_tech.jade
type: programming language
subtypes: [static]
ecosystems: [java, jvm]
---

:markdown
	Long, old list of "why java is shit":

	* no real generics
	* no switch with strings
	* no function pointers
	* no real event framework
	* properties everywhere!
	* no C#-like Properties (get/set hiding)
	* no Structs/Records
	* no initializing syntax for class fields, write stupid constructors
	* no default paramaters
	* no operator overloading!
	* no virtual constructors, super constructor must be called first
	* only anonymous classes, not methods
	* many libraries use magic strings, lose static typing
	* no class extensions
	* no partial classes
	* no 'protected' scope only for subclasses
	* no help for thread syncronisation
	* no conditional compilations (macros)
	* stupid magical Interfaces like 'Cloneable', which does not contain the method 'clone()', but is used as a flag for developers
	* no coroutines
	* return type not in method signature
	* OWNED BY ORACLE
	* Iterators hold between values instead of on values and have no 'current'
	* inconsistent naming (<tt>array.length</tt> vs. <tt>list.size()</tt> vs. <tt>foobar.count()</tt>)
	* a ton of string classes (<tt>String</tt>, <tt>StringBuilder</tt>, <tt>StringBuffer</tt>, ...) but no '''String.join(List)'''
	* Swing, srlsy
		*
	* java.util.Date deprecated and Calendar with ridiculous Interfaces
	* Array.toString() makes no sense
	* missing 'in' operator for arrays and lists


	german:

	* hat seine hässlichen, bloatigen Toolkits so durchgedrückt, dass zwar Alternativen existieren, aber kaum benutzt werden.
	* Iteratoren stehen zwischen statt auf den Werten und haben deshalb kein '''Current'''.
	* inkonsistente Bezeichner (<tt>array.length</tt> vs. <tt>list.size()</tt> vs. <tt>foobar.count()</tt>)
	* zig String-Klassen (<tt>String</tt>, <tt>StringBuilder</tt>, <tt>StringBuffer</tt>, ...) aber kein '''String.join(List)'''
	* Swing totaler Bullshit
	** kann nix komplizierteres, das man in etwa jedem zweiten Programm braucht, muss jedes Mal selber implementiert werden
	** grottenlahm durch Zeichnen in Java
	** eigenes hässliches und nicht natives Aussehen
	** <tt>JList</tt> nicht editierbar, <tt>JTable</tt> und <tt>JTree</tt> z.B. schon
	** keine direkte i18n-/l10n-Unterstützung
	** geschicktere Listener-Implementierungen, z.B. Signal-Slot-Konzept, '''fire()''' muss immer selber definiert werden
	** grottige Dokumentation: JPanel.validate() validates the panel
	** <tt>Desktop</tt> gar nicht plattformunabhängig, NotSupportedExeption auf GNU/Linux mit KDE
	** Swing & Mac auch witzlos, Qt kann Menü- und Werkzeugleisten komfortabler/automatisch korrekt behandeln
	* <tt>java.util.Date</tt> mit brauchbarer API obsolete, dafür <tt>Calendar</tt> mit unbedienbarer Schnittstelle (<tt>cal.get(Calendar.YEAR)</tt> statt <tt>date.getYear()</tt>)
	* <tt>Array.toString()</tt> liefert unsinnigen String zurück
	* Fehlender <tt>in</tt>-Operator, der auf Arrays und Listen anwendbar ist, <tt>Arrays.binarySearch(array, element) > -1</tt> oder <tt>list.contains(element)</tt> sehr umständlich
